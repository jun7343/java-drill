plugins {
    id "java"
    id "idea"
    id "jacoco"
}

group "io.drill.java"
version "0.0.1-SNAPSHOT"
sourceCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

ext {
    JUPITER_VERSION = "5.7.2"
}

dependencies {
    implementation "net.bytebuddy:byte-buddy:1.10.18"
    testCompile "org.junit.jupiter:junit-jupiter-api:$JUPITER_VERSION"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$JUPITER_VERSION"
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }

    useJUnitPlatform()

    finalizedBy "jacocoTestReport"
}

jacoco {
    // JaCoCo 버전
    toolVersion = "0.8.5"

//  테스트결과 리포트를 저장할 경로 변경
//  default는 "${project.reporting.baseDir}/jacoco"
//  reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        // 원하는 리포트를 켜고 끌 수 있다.
        html.enabled true
        xml.enabled false
        csv.enabled false

//      각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있다.
//      html.destination file("$buildDir/jacocoHtml")
//      xml.destination file("$buildDir/jacoco.xml")
    }

    finalizedBy "jacocoTestCoverageVerification"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            // "element"가 없으면 프로젝트의 전체 파일을 합친 값을 기준으로 한다.
            limit {
                // "counter"를 지정하지 않으면 default는 "INSTRUCTION"
                // "value"를 지정하지 않으면 default는 "COVEREDRATIO"
                minimum = 0.00
            }
        }

        rule {
            // 룰을 간단히 켜고 끌 수 있다.
            enabled = true

            // 룰을 체크할 단위는 클래스 단위
            element = "CLASS"

            // 브랜치 커버리지를 최소한 90% 만족시켜야 한다.
            limit {
                counter = "BRANCH"
                value = "COVEREDRATIO"
                minimum = 0.00
            }

            // 라인 커버리지를 최소한 80% 만족시켜야 한다.
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = 0.00
            }

            // 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한한다.
            limit {
                counter = "LINE"
                value = "TOTALCOUNT"
                maximum = 200
//              maximum = 8
            }

            // 커버리지 체크를 제외할 클래스들
            excludes = [
//                    "*.test.*",
//                    "*.Kotlin*"
            ]
        }
    }
}

task testCoverage(type: Test) {
    group "verification"
    description "Runs the unit tests with coverage"

    dependsOn(":test",
            ":jacocoTestReport",
            ":jacocoTestCoverageVerification")

    tasks["jacocoTestReport"].mustRunAfter(tasks["test"])
    tasks["jacocoTestCoverageVerification"].mustRunAfter(tasks["jacocoTestReport"])
}